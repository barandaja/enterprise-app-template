version: '3.8'

# Secure Event-driven architecture infrastructure
# Includes hardened Kafka, Zookeeper with SASL authentication

services:
  # Zookeeper with SASL authentication
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: enterprise_zookeeper_secure
    environment:
      # Basic configuration
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SECURE_CLIENT_PORT: 2182
      ZOOKEEPER_TICK_TIME: 2000
      
      # SASL authentication
      ZOOKEEPER_AUTH_PROVIDER_SASL: org.apache.zookeeper.server.auth.SASLAuthenticationProvider
      ZOOKEEPER_REQUIRE_CLIENT_AUTH_SCHEME: sasl
      KAFKA_OPTS: >-
        -Djava.security.auth.login.config=/etc/kafka/zookeeper_jaas.conf
        -Dzookeeper.authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider
        -Dzookeeper.allowSaslFailedClients=false
    ports:
      - "2181:2181"
      - "2182:2182"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
      - ./config/kafka/zookeeper_jaas.conf:/etc/kafka/zookeeper_jaas.conf:ro
      - ./config/kafka/krb5.conf:/etc/krb5.conf:ro
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    user: "1000:1000"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID

  # Kafka broker with SASL_SSL
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: enterprise_kafka_secure
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9093:9093"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2182
      
      # Listeners configuration
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_SSL:SASL_SSL,SASL_PLAINTEXT:SASL_PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,SSL://localhost:9093,SASL_SSL://localhost:9094
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,SSL://0.0.0.0:9093,SASL_SSL://0.0.0.0:9094
      
      # SSL Configuration
      KAFKA_SSL_KEYSTORE_FILENAME: kafka.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: key_creds
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore_creds
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_SSL_CIPHER_SUITES: TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_CHACHA20_POLY1305_SHA256
      KAFKA_SSL_ENABLED_PROTOCOLS: TLSv1.3,TLSv1.2
      
      # SASL Configuration
      KAFKA_SASL_ENABLED_MECHANISMS: SCRAM-SHA-512,PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: SCRAM-SHA-512
      KAFKA_INTER_BROKER_LISTENER_NAME: SASL_SSL
      
      # Security settings
      KAFKA_OPTS: >-
        -Djava.security.auth.login.config=/etc/kafka/kafka_jaas.conf
        -Djavax.net.ssl.trustStore=/etc/kafka/secrets/kafka.truststore.jks
        -Djavax.net.ssl.trustStorePassword=changeit
        -Djavax.net.ssl.keyStore=/etc/kafka/secrets/kafka.keystore.jks
        -Djavax.net.ssl.keyStorePassword=changeit
      
      # Other configurations
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      
      # Authorization
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "false"
      KAFKA_SUPER_USERS: User:admin;User:kafka
      
    volumes:
      - kafka_data:/var/lib/kafka/data
      - ./config/kafka/kafka_jaas.conf:/etc/kafka/kafka_jaas.conf:ro
      - ./config/kafka/secrets:/etc/kafka/secrets:ro
      - ./config/kafka/krb5.conf:/etc/krb5.conf:ro
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9093", "--command-config", "/etc/kafka/client.properties"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    user: "1000:1000"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID

  # Schema Registry with authentication
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: enterprise_schema_registry_secure
    depends_on:
      - kafka
    ports:
      - "8091:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: SASL_SSL://kafka:9094
      SCHEMA_REGISTRY_LISTENERS: https://0.0.0.0:8081
      
      # SSL settings
      SCHEMA_REGISTRY_SSL_KEYSTORE_LOCATION: /etc/schema-registry/secrets/schema-registry.keystore.jks
      SCHEMA_REGISTRY_SSL_KEYSTORE_PASSWORD: changeit
      SCHEMA_REGISTRY_SSL_KEY_PASSWORD: changeit
      SCHEMA_REGISTRY_SSL_TRUSTSTORE_LOCATION: /etc/schema-registry/secrets/schema-registry.truststore.jks
      SCHEMA_REGISTRY_SSL_TRUSTSTORE_PASSWORD: changeit
      SCHEMA_REGISTRY_SSL_CLIENT_AUTH: true
      
      # SASL settings
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: SASL_SSL
      SCHEMA_REGISTRY_KAFKASTORE_SASL_MECHANISM: SCRAM-SHA-512
      SCHEMA_REGISTRY_KAFKASTORE_SASL_JAAS_CONFIG: >-
        org.apache.kafka.common.security.scram.ScramLoginModule required
        username="schema-registry"
        password="schema-registry-secret";
      
      # Authentication
      SCHEMA_REGISTRY_AUTHENTICATION_METHOD: BASIC
      SCHEMA_REGISTRY_AUTHENTICATION_REALM: SchemaRegistry
      SCHEMA_REGISTRY_AUTHENTICATION_ROLES: admin,developer,user
      SCHEMA_REGISTRY_OPTS: -Djava.security.auth.login.config=/etc/schema-registry/schema-registry_jaas.conf
      
    volumes:
      - ./config/kafka/secrets:/etc/schema-registry/secrets:ro
      - ./config/kafka/schema-registry_jaas.conf:/etc/schema-registry/schema-registry_jaas.conf:ro
    networks:
      - backend_network
    restart: unless-stopped
    user: "1000:1000"
    security_opt:
      - no-new-privileges:true

  # Event Store Database with encryption at rest
  event-store-db:
    image: postgres:15-alpine
    container_name: enterprise_event_store_secure
    environment:
      POSTGRES_DB: event_store
      POSTGRES_USER: event_user
      POSTGRES_PASSWORD: ${EVENT_STORE_PASSWORD:-CHANGE_ME_event_store_password}
      POSTGRES_INITDB_ARGS: "--data-checksums"
      
      # Security settings
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      
    ports:
      - "5433:5432"
    volumes:
      - event_store_data:/var/lib/postgresql/data
      - ./scripts/init-event-store-secure.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c ssl=on
      -c ssl_cert_file=/etc/ssl/certs/server.crt
      -c ssl_key_file=/etc/ssl/private/server.key
      -c ssl_ca_file=/etc/ssl/certs/ca.crt
      -c ssl_ciphers=HIGH:MEDIUM:!3DES:!aNULL
      -c ssl_prefer_server_ciphers=on
      -c ssl_min_protocol_version=TLSv1.2
    networks:
      - database_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U event_user -d event_store"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    user: "999:999"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID

  # Kafka UI with authentication (development only)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: enterprise_kafka_ui_secure
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: secure
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2182
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: SASL_SSL
      KAFKA_CLUSTERS_0_PROPERTIES_SASL_MECHANISM: SCRAM-SHA-512
      KAFKA_CLUSTERS_0_PROPERTIES_SASL_JAAS_CONFIG: >-
        org.apache.kafka.common.security.scram.ScramLoginModule required
        username="admin"
        password="admin-secret";
      KAFKA_CLUSTERS_0_PROPERTIES_SSL_TRUSTSTORE_LOCATION: /kafka-ui/truststore/kafka.truststore.jks
      KAFKA_CLUSTERS_0_PROPERTIES_SSL_TRUSTSTORE_PASSWORD: changeit
      KAFKA_CLUSTERS_0_READONLY: "false"
      
      # Authentication for UI
      AUTH_TYPE: LOGIN_FORM
      SPRING_SECURITY_USER_NAME: admin
      SPRING_SECURITY_USER_PASSWORD: ${KAFKA_UI_PASSWORD:-CHANGE_ME_kafka_ui_password}
      
    volumes:
      - ./config/kafka/secrets:/kafka-ui/truststore:ro
    networks:
      - backend_network
      - frontend_network
    profiles: ["tools"]
    restart: unless-stopped
    user: "1000:1000"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Create Kafka users and ACLs
  kafka-setup:
    image: confluentinc/cp-kafka:7.5.0
    container_name: enterprise_kafka_setup
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...' &&
        sleep 10 &&
        
        echo 'Creating users...' &&
        kafka-configs --bootstrap-server kafka:9094 --command-config /etc/kafka/admin.properties \
          --alter --add-config 'SCRAM-SHA-512=[iterations=8192,password=auth-service-secret]' \
          --entity-type users --entity-name auth-service &&
        
        kafka-configs --bootstrap-server kafka:9094 --command-config /etc/kafka/admin.properties \
          --alter --add-config 'SCRAM-SHA-512=[iterations=8192,password=user-service-secret]' \
          --entity-type users --entity-name user-service &&
        
        kafka-configs --bootstrap-server kafka:9094 --command-config /etc/kafka/admin.properties \
          --alter --add-config 'SCRAM-SHA-512=[iterations=8192,password=notification-service-secret]' \
          --entity-type users --entity-name notification-service &&
        
        echo 'Setting up ACLs...' &&
        kafka-acls --bootstrap-server kafka:9094 --command-config /etc/kafka/admin.properties \
          --add --allow-principal User:auth-service \
          --producer --topic 'secure_events.auth-*' &&
        
        kafka-acls --bootstrap-server kafka:9094 --command-config /etc/kafka/admin.properties \
          --add --allow-principal User:auth-service \
          --consumer --topic 'secure_events.user-profile-created' --group auth-service &&
        
        kafka-acls --bootstrap-server kafka:9094 --command-config /etc/kafka/admin.properties \
          --add --allow-principal User:user-service \
          --producer --topic 'secure_events.user-*' &&
        
        kafka-acls --bootstrap-server kafka:9094 --command-config /etc/kafka/admin.properties \
          --add --allow-principal User:user-service \
          --consumer --topic 'secure_events.auth-user-registered' --group user-service &&
        
        kafka-acls --bootstrap-server kafka:9094 --command-config /etc/kafka/admin.properties \
          --add --allow-principal User:notification-service \
          --producer --topic 'secure_events.notification-*' &&
        
        kafka-acls --bootstrap-server kafka:9094 --command-config /etc/kafka/admin.properties \
          --add --allow-principal User:notification-service \
          --consumer --topic 'secure_events.auth-*' --group notification-service &&
        
        kafka-acls --bootstrap-server kafka:9094 --command-config /etc/kafka/admin.properties \
          --add --allow-principal User:notification-service \
          --consumer --topic 'secure_events.user-*' --group notification-service &&
        
        echo 'Creating topics...' &&
        kafka-topics --bootstrap-server kafka:9094 --command-config /etc/kafka/admin.properties \
          --create --topic secure_events.auth-user-registered --partitions 3 --replication-factor 1 &&
        
        kafka-topics --bootstrap-server kafka:9094 --command-config /etc/kafka/admin.properties \
          --create --topic secure_events.user-profile-created --partitions 3 --replication-factor 1 &&
        
        kafka-topics --bootstrap-server kafka:9094 --command-config /etc/kafka/admin.properties \
          --create --topic secure_events.dlq --partitions 1 --replication-factor 1 &&
        
        echo 'Kafka setup complete!'
      "
    volumes:
      - ./config/kafka/admin.properties:/etc/kafka/admin.properties:ro
    networks:
      - backend_network
    profiles: ["setup"]

volumes:
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local
  event_store_data:
    driver: local
    driver_opts:
      type: none
      o: bind,uid=999,gid=999
      device: ${PWD}/data/event_store

networks:
  backend_network:
    external: true
    name: enterprise_backend
  database_network:
    external: true
    name: enterprise_database
  frontend_network:
    external: true
    name: enterprise_frontend