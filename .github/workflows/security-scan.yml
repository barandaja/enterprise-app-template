name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - sast
          - dependency
          - container
          - infrastructure

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # Static Application Security Testing (SAST)
  sast-scan:
    name: SAST Scan
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'all' ||
      github.event.inputs.scan_type == 'sast' ||
      github.event.inputs.scan_type == '' ||
      github.event_name != 'workflow_dispatch'
    timeout-minutes: 30
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript, python
          queries: security-extended,security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci --prefer-offline --no-audit

      - name: Build frontend for analysis
        working-directory: frontend
        run: npm run build

      - name: Install backend dependencies
        run: |
          for service in services/*/; do
            if [ -f "$service/requirements.txt" ]; then
              pip install -r "$service/requirements.txt" || true
            fi
          done

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript-typescript,python"

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'all' ||
      github.event.inputs.scan_type == 'dependency' ||
      github.event.inputs.scan_type == '' ||
      github.event_name != 'workflow_dispatch'
    timeout-minutes: 20
    strategy:
      matrix:
        scanner: [frontend, backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (Frontend)
        if: matrix.scanner == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python (Backend)
        if: matrix.scanner == 'backend'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install frontend dependencies
        if: matrix.scanner == 'frontend'
        working-directory: frontend
        run: npm ci --prefer-offline --no-audit

      - name: Run npm audit (Frontend)
        if: matrix.scanner == 'frontend'
        working-directory: frontend
        run: |
          npm audit --audit-level=low --json > npm-audit-results.json || true
          npm audit --audit-level=moderate || audit_exit=$?
          if [ "$audit_exit" -gt 0 ]; then
            echo "::warning::npm audit found vulnerabilities"
          fi

      - name: Run Retire.js (Frontend)
        if: matrix.scanner == 'frontend'
        working-directory: frontend
        run: |
          npx retire --outputformat json --outputpath retire-results.json . || true
          npx retire . || retire_exit=$?
          if [ "$retire_exit" -gt 0 ]; then
            echo "::warning::Retire.js found vulnerable dependencies"
          fi

      - name: Install Python security tools (Backend)
        if: matrix.scanner == 'backend'
        run: |
          pip install safety pip-audit osv-scanner

      - name: Run Safety check (Backend)
        if: matrix.scanner == 'backend'
        run: |
          for service in services/*/; do
            if [ -f "$service/requirements.txt" ]; then
              echo "Scanning $service"
              safety check -r "$service/requirements.txt" --json --output "$service/safety-results.json" || true
              safety check -r "$service/requirements.txt" || safety_exit=$?
              if [ "$safety_exit" -gt 0 ]; then
                echo "::warning::Safety found vulnerabilities in $service"
              fi
            fi
          done

      - name: Run pip-audit (Backend)
        if: matrix.scanner == 'backend'
        run: |
          for service in services/*/; do
            if [ -f "$service/requirements.txt" ]; then
              echo "pip-audit scanning $service"
              pip-audit -r "$service/requirements.txt" --format=json --output="$service/pip-audit-results.json" || true
              pip-audit -r "$service/requirements.txt" || pip_audit_exit=$?
              if [ "$pip_audit_exit" -gt 0 ]; then
                echo "::warning::pip-audit found vulnerabilities in $service"
              fi
            fi
          done

      - name: Run OSV-Scanner (Backend)
        if: matrix.scanner == 'backend'
        run: |
          for service in services/*/; do
            if [ -f "$service/requirements.txt" ]; then
              echo "OSV-Scanner scanning $service"
              osv-scanner --format json --output "$service/osv-results.json" "$service/requirements.txt" || true
            fi
          done

      - name: Upload dependency scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-${{ matrix.scanner }}
          path: |
            frontend/*-results.json
            services/*/safety-results.json
            services/*/pip-audit-results.json
            services/*/osv-results.json
          retention-days: 30

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'all' ||
      github.event.inputs.scan_type == 'container' ||
      github.event.inputs.scan_type == '' ||
      github.event_name != 'workflow_dispatch'
    timeout-minutes: 25
    strategy:
      matrix:
        service: [auth-service, api-gateway, user-service]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: services/${{ matrix.service }}
          load: true
          tags: ${{ matrix.service }}:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service }}:security-scan
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Run Trivy (JSON output)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service }}:security-scan
          format: 'json'
          output: 'trivy-results-${{ matrix.service }}.json'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v4
        with:
          image: ${{ matrix.service }}:security-scan
          output-format: sarif
          output-file: grype-results-${{ matrix.service }}.sarif

      - name: Upload Grype scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-${{ matrix.service }}
          path: |
            trivy-results-${{ matrix.service }}.json
            grype-results-${{ matrix.service }}.sarif
          retention-days: 30

  # Infrastructure as Code security scanning
  iac-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'all' ||
      github.event.inputs.scan_type == 'infrastructure' ||
      github.event.inputs.scan_type == '' ||
      github.event_name != 'workflow_dispatch'
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'

      - name: Run Checkov (Terraform)
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/terraform
          framework: terraform
          output_format: sarif
          output_file_path: checkov-terraform.sarif

      - name: Run Checkov (Kubernetes)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/k8s
          framework: kubernetes
          output_format: sarif
          output_file_path: checkov-k8s.sarif

      - name: Run TFSec (Terraform)
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infrastructure/terraform
          format: sarif
          sarif_file: tfsec-results.sarif

      - name: Run Kubesec (Kubernetes)
        run: |
          # Install kubesec
          curl -sSX GET "https://api.github.com/repos/controlplaneio/kubesec/releases/latest" \
            | grep "browser_download_url.*linux_amd64.tar.gz" \
            | cut -d '"' -f 4 \
            | xargs curl -sSL \
            | tar xz
          sudo mv kubesec /usr/local/bin/

          # Scan Kubernetes manifests
          find infrastructure/k8s -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Scanning $file"
            kubesec scan "$file" --format json > "kubesec-$(basename "$file" .yaml).json" || true
          done

      - name: Upload IaC scan results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: |
            checkov-terraform.sarif
            checkov-k8s.sarif
            tfsec-results.sarif

      - name: Upload IaC scan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: iac-scan-results
          path: |
            checkov-*.sarif
            tfsec-results.sarif
            kubesec-*.json
          retention-days: 30

  # OWASP Dependency Check
  owasp-dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'all' ||
      github.event.inputs.scan_type == 'dependency' ||
      github.event.inputs.scan_type == '' ||
      github.event_name != 'workflow_dispatch'
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'enterprise-app-template'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7
            --exclude "**/node_modules/**"
            --exclude "**/test/**"
            --exclude "**/tests/**"

      - name: Upload OWASP results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check
          path: reports/
          retention-days: 30

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.scan_type == 'all' ||
      github.event.inputs.scan_type == 'sast' ||
      github.event.inputs.scan_type == '' ||
      github.event_name != 'workflow_dispatch'
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

  # Security report consolidation
  security-report:
    name: Consolidate Security Report
    runs-on: ubuntu-latest
    needs: [sast-scan, dependency-scan, container-scan, iac-scan, owasp-dependency-check, secret-scan]
    if: always()
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts/

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Generate security report
        run: |
          pip install jinja2 pyyaml
          
          cat > generate_report.py << 'EOF'
          import json
          import os
          import glob
          from datetime import datetime
          
          def collect_results():
              results = {
                  'scan_date': datetime.now().isoformat(),
                  'commit_sha': os.environ.get('GITHUB_SHA', 'unknown'),
                  'branch': os.environ.get('GITHUB_REF_NAME', 'unknown'),
                  'npm_audit': [],
                  'safety_results': [],
                  'trivy_results': [],
                  'checkov_issues': 0,
                  'summary': {}
              }
              
              # Collect npm audit results
              for file in glob.glob('security-artifacts/**/npm-audit-results.json', recursive=True):
                  try:
                      with open(file) as f:
                          data = json.load(f)
                          if 'vulnerabilities' in data:
                              results['npm_audit'].extend(data['vulnerabilities'])
                  except: pass
              
              # Collect safety results
              for file in glob.glob('security-artifacts/**/safety-results.json', recursive=True):
                  try:
                      with open(file) as f:
                          data = json.load(f)
                          results['safety_results'].extend(data)
                  except: pass
              
              # Collect trivy results
              for file in glob.glob('security-artifacts/**/trivy-results-*.json', recursive=True):
                  try:
                      with open(file) as f:
                          data = json.load(f)
                          if 'Results' in data:
                              results['trivy_results'].extend(data['Results'])
                  except: pass
              
              # Generate summary
              results['summary'] = {
                  'total_npm_vulnerabilities': len(results['npm_audit']),
                  'total_python_vulnerabilities': len(results['safety_results']),
                  'total_container_issues': sum(len(r.get('Vulnerabilities', [])) for r in results['trivy_results']),
                  'scan_status': 'completed'
              }
              
              return results
          
          results = collect_results()
          
          # Generate markdown report
          report = f"""# Security Scan Report
          
          **Scan Date**: {results['scan_date']}
          **Commit**: {results['commit_sha']}
          **Branch**: {results['branch']}
          
          ## Summary
          
          - **NPM Vulnerabilities**: {results['summary']['total_npm_vulnerabilities']}
          - **Python Vulnerabilities**: {results['summary']['total_python_vulnerabilities']}
          - **Container Issues**: {results['summary']['total_container_issues']}
          
          ## Recommendations
          
          1. Review and update vulnerable dependencies
          2. Implement security patches for high-severity issues
          3. Consider upgrading to newer versions of affected packages
          4. Review container base images for security updates
          
          ## Detailed Results
          
          Full scan results are available in the GitHub Actions artifacts.
          """
          
          with open('security-report.md', 'w') as f:
              f.write(report)
          
          with open('security-results.json', 'w') as f:
              json.dump(results, f, indent=2)
          EOF
          
          python generate_report.py

      - name: Upload consolidated security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: |
            security-report.md
            security-results.json
          retention-days: 30

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Scan Results\n\n${report}`
            });

      - name: Fail on critical vulnerabilities
        run: |
          # Parse results and fail if critical vulnerabilities found
          python -c "
          import json
          import sys
          
          with open('security-results.json') as f:
              data = json.load(f)
          
          summary = data['summary']
          total_issues = summary['total_npm_vulnerabilities'] + summary['total_python_vulnerabilities'] + summary['total_container_issues']
          
          if total_issues > 50:  # Adjust threshold as needed
              print(f'::error::Too many security issues found: {total_issues}')
              sys.exit(1)
          
          print(f'Security scan completed with {total_issues} total issues')
          "