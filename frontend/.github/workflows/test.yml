name: Frontend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/test.yml'

defaults:
  run:
    working-directory: frontend

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npx tsc --noEmit

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:run

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-node-${{ matrix.node-version }}
          path: |
            frontend/coverage/
            frontend/test-results.xml
          retention-days: 7

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run security-focused tests
        run: npm run test:security

      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: |
            frontend/coverage/
            frontend/security-test-results.xml
          retention-days: 30

  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [unit-tests, security-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/coverage-final.json
          directory: ./frontend/coverage/
          flags: frontend,unittests
          name: frontend-coverage
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Coverage comment
        uses: 5monkeys/cobertura-action@master
        if: github.event_name == 'pull_request'
        with:
          path: frontend/coverage/cobertura-coverage.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 80
          fail_below_threshold: true

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:4173

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: |
            frontend/playwright-report/
            frontend/playwright-results/
          retention-days: 7

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Run accessibility tests
        run: |
          # Start the server in background
          npm run preview &
          SERVER_PID=$!
          
          # Wait for server to be ready
          npx wait-on http://localhost:4173 --timeout 60000
          
          # Run accessibility-focused E2E tests
          npx playwright test --grep "accessibility|a11y" --project=chromium
          
          # Stop the server
          kill $SERVER_PID

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-report
          path: |
            frontend/playwright-report/
            frontend/accessibility-violations.json
          retention-days: 14

  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Run visual regression tests
        run: |
          npm run preview &
          SERVER_PID=$!
          npx wait-on http://localhost:4173 --timeout 60000
          npx playwright test --grep "visual|screenshot" --project=chromium
          kill $SERVER_PID

      - name: Upload visual diff results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-regression-report
          path: |
            frontend/playwright-report/
            frontend/test-results/
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate
          npm audit --audit-level=moderate --json > audit-results.json
        continue-on-error: true

      - name: Check for known vulnerabilities
        run: |
          # Check if there are any high or critical vulnerabilities
          if [ -f audit-results.json ]; then
            HIGH_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
            CRITICAL_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
            
            echo "High vulnerabilities: $HIGH_VULNS"
            echo "Critical vulnerabilities: $CRITICAL_VULNS"
            
            if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
              echo "::error::Found high or critical security vulnerabilities"
              exit 1
            fi
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results
          path: frontend/audit-results.json
          retention-days: 30

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          npm run preview &
          SERVER_PID=$!
          npx wait-on http://localhost:4173 --timeout 60000
          lhci autorun --config=lighthouserc.js
          kill $SERVER_PID
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  integration-summary:
    name: Integration Summary
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests, security-tests, coverage, e2e-tests]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "Lint and TypeCheck: ${{ needs.lint-and-typecheck.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Security Tests: ${{ needs.security-tests.result }}"
          echo "Coverage: ${{ needs.coverage.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          
          if [[ "${{ needs.lint-and-typecheck.result }}" == "failure" ]] || 
             [[ "${{ needs.unit-tests.result }}" == "failure" ]] || 
             [[ "${{ needs.security-tests.result }}" == "failure" ]] || 
             [[ "${{ needs.coverage.result }}" == "failure" ]] || 
             [[ "${{ needs.e2e-tests.result }}" == "failure" ]]; then
            echo "::error::One or more critical test suites failed"
            exit 1
          fi
          
          echo "All critical tests passed! ✅"

      - name: Post summary comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## 🧪 Test Results Summary
            
            | Test Suite | Status |
            |------------|--------|
            | Lint & TypeCheck | ${{ needs.lint-and-typecheck.result == 'success' && '✅' || '❌' }} |
            | Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅' || '❌' }} |  
            | Security Tests | ${{ needs.security-tests.result == 'success' && '✅' || '❌' }} |
            | Coverage | ${{ needs.coverage.result == 'success' && '✅' || '❌' }} |
            | E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅' || '❌' }} |
            
            View detailed results in the [Actions tab](${context.payload.pull_request.html_url}/checks).
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });