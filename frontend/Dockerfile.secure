# Security-hardened Dockerfile for Frontend
# Multi-stage build for minimal attack surface

# Build stage
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies with exact versions
RUN npm ci --only=production && \
    npm cache clean --force

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage - Using nginx
FROM nginx:alpine AS production

# Security: Create non-root user
ARG USER_ID=1003
ARG GROUP_ID=1003
RUN addgroup -g ${GROUP_ID} -S appuser && \
    adduser -u ${USER_ID} -S appuser -G appuser

# Install runtime dependencies
RUN apk add --no-cache \
    tini \
    && rm -rf /var/cache/apk/*

# Remove default nginx config
RUN rm -rf /etc/nginx/conf.d/*

# Copy custom nginx config
COPY config/nginx/frontend.conf /etc/nginx/conf.d/default.conf

# Copy built application from builder
COPY --from=builder --chown=appuser:appuser /app/dist /usr/share/nginx/html

# Create necessary directories and set permissions
RUN mkdir -p /var/cache/nginx /var/run /var/log/nginx && \
    chown -R appuser:appuser /var/cache/nginx /var/run /var/log/nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# Security: Remove unnecessary files
RUN find /usr/share/nginx/html -name "*.map" -delete || true

# Create custom nginx.conf that works with non-root user
RUN echo 'user appuser appuser;\n\
worker_processes auto;\n\
error_log /var/log/nginx/error.log warn;\n\
pid /var/run/nginx.pid;\n\
events {\n\
    worker_connections 1024;\n\
}\n\
http {\n\
    include /etc/nginx/mime.types;\n\
    default_type application/octet-stream;\n\
    log_format main '\''$remote_addr - $remote_user [$time_local] "$request" '\'' \n\
                    '\''$status $body_bytes_sent "$http_referer" '\'' \n\
                    '\''"$http_user_agent" "$http_x_forwarded_for"'\'';\n\
    access_log /var/log/nginx/access.log main;\n\
    sendfile on;\n\
    keepalive_timeout 65;\n\
    server_tokens off;\n\
    gzip on;\n\
    gzip_vary on;\n\
    gzip_proxied any;\n\
    gzip_comp_level 6;\n\
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/xhtml+xml application/x-font-ttf application/x-font-opentype application/vnd.ms-fontobject image/svg+xml;\n\
    include /etc/nginx/conf.d/*.conf;\n\
}' > /etc/nginx/nginx.conf

# Switch to non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1

# Expose port (non-privileged)
EXPOSE 80

# Use tini as init system
ENTRYPOINT ["/sbin/tini", "--"]

# Run nginx in foreground
CMD ["nginx", "-g", "daemon off;"]

# Development stage
FROM node:20-alpine AS development

# Security: Create non-root user
ARG USER_ID=1003
ARG GROUP_ID=1003
RUN addgroup -g ${GROUP_ID} -S appuser && \
    adduser -u ${USER_ID} -S appuser -G appuser

# Install development dependencies
RUN apk add --no-cache \
    git \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev)
RUN npm ci && \
    npm cache clean --force

# Copy source code
COPY --chown=appuser:appuser . .

# Create directories for development
RUN mkdir -p node_modules/.cache && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose development server port
EXPOSE 5173

# Development command
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]