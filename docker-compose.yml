version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: enterprise_postgres
    environment:
      POSTGRES_DB: enterprise_db
      POSTGRES_USER: enterprise_user
      POSTGRES_PASSWORD: enterprise_pass
      POSTGRES_MULTIPLE_DATABASES: auth_db,user_db,gateway_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U enterprise_user -d enterprise_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: enterprise_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
      target: development
    container_name: enterprise_auth_service
    environment:
      # Override specific values for containerized environment
      - DATABASE_URL=postgresql+asyncpg://enterprise_user:iou5ko4lJVFY9BV0hDJfotLSj@postgres:5432/auth_db
      - REDIS_URL=redis://:Vzje9bdeyRdUBgDbXZlNHtInm@redis:6379/0
      - REDIS_SSL=false
      - SECRET_KEY=bd3faf70ffee270dc9b6b0ab1892929f82b0aa66b926c687ecbf650afd6fdfd0
      - JWT_SECRET_KEY=7e119a5beec74bffab47cd428415c16b3b9d84002a67243be4f9a37d3fb6dd8e
      - ENCRYPTION_KEY=bd3faf70ffee270dc9b6b0ab1892929f82b0aa66b926c687ecbf650afd6fdfe1
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      # Email configuration (required)
      - SMTP_HOST=localhost
      - SMTP_PORT=587
      - SMTP_USER=test@localhost
      - SMTP_PASSWORD=testpass
      - SMTP_TLS=false
      - EMAILS_FROM_EMAIL=noreply@enterprise.local
      - EMAILS_FROM_NAME=Enterprise Auth Service
    ports:
      - "8001:8000"
    volumes:
      - ./services/auth-service/src:/app/src
      - ./services/auth-service/alembic:/app/alembic
      - ./services/auth-service/alembic.ini:/app/alembic.ini
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
      target: development
    container_name: enterprise_user_service
    environment:
      - DATABASE_URL=postgresql+asyncpg://enterprise_user:iou5ko4lJVFY9BV0hDJfotLSj@postgres:5432/user_db
      - REDIS_URL=redis://redis:6379/1
      - AUTH_SERVICE_URL=http://auth-service:8000
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - CORS_ORIGINS=http://localhost:5173,http://localhost:3000
    ports:
      - "8002:8000"
    volumes:
      - ./services/user-service/src:/app/src:ro
      - ./services/user-service/alembic:/app/alembic:ro
      - ./services/user-service/alembic.ini:/app/alembic.ini:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
      target: development
    container_name: enterprise_api_gateway
    environment:
      - DATABASE_URL=postgresql+asyncpg://enterprise_user:iou5ko4lJVFY9BV0hDJfotLSj@postgres:5432/gateway_db
      - REDIS_URL=redis://:Vzje9bdeyRdUBgDbXZlNHtInm@redis:6379/2
      - AUTH_SERVICE_URL=http://auth-service:8000
      - USER_SERVICE_URL=http://user-service:8000
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - CORS_ORIGINS=http://localhost:5173,http://localhost:3000
      - RATE_LIMIT_ENABLED=true
      - CIRCUIT_BREAKER_ENABLED=true
    ports:
      - "8000:8000"
    volumes:
      - ./services/api-gateway/src:/app/src
      - ./services/api-gateway/alembic:/app/alembic
      - ./services/api-gateway/alembic.ini:/app/alembic.ini
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: enterprise_frontend
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_AUTH_SERVICE_URL=http://localhost:8001
      - VITE_USER_SERVICE_URL=http://localhost:8002
      - NODE_ENV=development
    ports:
      - "5173:5173"
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - ./frontend/index.html:/app/index.html:ro
      - ./frontend/package.json:/app/package.json:ro
      - ./frontend/package-lock.json:/app/package-lock.json:ro
      - ./frontend/vite.config.ts:/app/vite.config.ts:ro
      - ./frontend/tailwind.config.js:/app/tailwind.config.js:ro
      - ./frontend/postcss.config.js:/app/postcss.config.js:ro
      - ./frontend/tsconfig.json:/app/tsconfig.json:ro
      - ./frontend/tsconfig.app.json:/app/tsconfig.app.json:ro
      - ./frontend/tsconfig.node.json:/app/tsconfig.node.json:ro
      # Use named volume for node_modules to persist dependencies
      - frontend_node_modules:/app/node_modules
    depends_on:
      - api-gateway
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: enterprise_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - api-gateway
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Optional: Database Admin Tool
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: enterprise_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@enterprise.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    profiles: ["tools"]
    restart: unless-stopped

  # Optional: Redis Admin Tool
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: enterprise_redis_commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    profiles: ["tools"]
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  default:
    name: enterprise_network
    driver: bridge