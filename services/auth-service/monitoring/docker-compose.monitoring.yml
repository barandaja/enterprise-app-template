version: '3.8'

services:
  # Prometheus - Metrics collection and alerting
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: auth-service-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--alertmanager.url=http://alertmanager:9093'
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # AlertManager - Alert routing and notifications
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: auth-service-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - ./alertmanager/templates:/etc/alertmanager/templates:ro
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--web.route-prefix=/'
      - '--cluster.listen-address='
    networks:
      - monitoring
    restart: unless-stopped
    environment:
      - SMTP_HOST=${SMTP_HOST:-smtp.example.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_FROM_EMAIL=${SMTP_FROM_EMAIL:-alerts@example.com}
      - SMTP_USER=${SMTP_USER:-alerts@example.com}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-changeme}
      - DEFAULT_EMAIL=${DEFAULT_EMAIL:-devops@example.com}
      - ONCALL_EMAIL=${ONCALL_EMAIL:-oncall@example.com}
      - SECURITY_TEAM_EMAIL=${SECURITY_TEAM_EMAIL:-security@example.com}
      - COMPLIANCE_TEAM_EMAIL=${COMPLIANCE_TEAM_EMAIL:-compliance@example.com}
      - TEAM_EMAIL=${TEAM_EMAIL:-team@example.com}
      - DATABASE_TEAM_EMAIL=${DATABASE_TEAM_EMAIL:-dba@example.com}
      - PERFORMANCE_TEAM_EMAIL=${PERFORMANCE_TEAM_EMAIL:-performance@example.com}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - CRITICAL_SLACK_CHANNEL=${CRITICAL_SLACK_CHANNEL:-#alerts-critical}
      - SECURITY_SLACK_CHANNEL=${SECURITY_SLACK_CHANNEL:-#security-alerts}
      - WARNING_SLACK_CHANNEL=${WARNING_SLACK_CHANNEL:-#alerts-warning}
      - PAGERDUTY_INTEGRATION_KEY=${PAGERDUTY_INTEGRATION_KEY}
      - GRAFANA_BASE_URL=${GRAFANA_BASE_URL:-http://localhost:3000}
      - PROMETHEUS_BASE_URL=http://localhost:9090
      - ALERTMANAGER_BASE_URL=http://localhost:9093
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:10.2.2
    container_name: auth-service-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_AUTH_DISABLE_LOGIN_FORM=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST:-smtp.example.com:587}
      - GF_SMTP_USER=${SMTP_USER:-alerts@example.com}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD:-changeme}
      - GF_SMTP_FROM_ADDRESS=${SMTP_FROM_EMAIL:-alerts@example.com}
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL:-http://localhost:3000}
      - GF_ALERTING_ENABLED=true
      - GF_UNIFIED_ALERTING_ENABLED=true
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: auth-service-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
    restart: unless-stopped

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: auth-service-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - monitoring
    restart: unless-stopped

  # Redis Exporter - Redis metrics (if using external Redis)
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: auth-service-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=${REDIS_URL:-redis://localhost:6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - monitoring
    restart: unless-stopped
    profiles:
      - redis-monitoring

  # Postgres Exporter - Database metrics (if using external PostgreSQL)
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: auth-service-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=${DATABASE_MONITORING_URL:-postgresql://monitor_user:monitor_pass@localhost:5432/authdb?sslmode=disable}
    networks:
      - monitoring
    restart: unless-stopped
    profiles:
      - postgres-monitoring

  # Blackbox Exporter - External endpoint monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: auth-service-blackbox-exporter
    ports:
      - "9115:9115"
    volumes:
      - ./blackbox/blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    networks:
      - monitoring
    restart: unless-stopped

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local

networks:
  monitoring:
    driver: bridge
    name: auth-service-monitoring

# Additional services for log aggregation (optional)
---
version: '3.8'

services:
  # Loki - Log aggregation
  loki:
    image: grafana/loki:2.9.2
    container_name: auth-service-loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring
    restart: unless-stopped
    profiles:
      - logging

  # Promtail - Log collection agent
  promtail:
    image: grafana/promtail:2.9.2
    container_name: auth-service-promtail
    volumes:
      - ./promtail/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring
    restart: unless-stopped
    profiles:
      - logging

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: auth-service-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "6831:6831/udp"  # UDP collector
      - "6832:6832/udp"  # UDP collector
      - "14250:14250"  # gRPC collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - monitoring
    restart: unless-stopped
    profiles:
      - tracing

volumes:
  loki-data:
    driver: local