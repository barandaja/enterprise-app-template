name: Auth Service Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/auth-service/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'services/auth-service/**'
      - '.github/workflows/test.yml'

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"

jobs:
  # Lint and Security Scan
  lint-and-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        working-directory: services/auth-service
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy bandit safety
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          
      - name: Format check with Black
        working-directory: services/auth-service
        run: black --check --diff src tests
        
      - name: Import sort check with isort
        working-directory: services/auth-service
        run: isort --check-only --diff src tests
        
      - name: Lint with flake8
        working-directory: services/auth-service
        run: |
          flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Type check with mypy
        working-directory: services/auth-service
        run: mypy src --ignore-missing-imports
        
      - name: Security scan with bandit
        working-directory: services/auth-service
        run: |
          bandit -r src -f json -o bandit-report.json || true
          bandit -r src
          
      - name: Dependency vulnerability scan
        working-directory: services/auth-service
        run: |
          safety check -r requirements.txt --json --output safety-report.json || true
          safety check -r requirements.txt
          
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            services/auth-service/bandit-report.json
            services/auth-service/safety-report.json

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_authdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        working-directory: services/auth-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          
      - name: Wait for services
        run: |
          sleep 10
          
      - name: Run unit tests
        working-directory: services/auth-service
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_authdb
          REDIS_URL: redis://localhost:6379/1
          SECRET_KEY: test-secret-key-for-ci
          TESTING: true
          ENVIRONMENT: testing
        run: |
          pytest tests/unit/ \
            -v \
            --cov=src \
            --cov-report=xml:coverage-unit.xml \
            --cov-report=html:htmlcov-unit \
            --cov-report=term-missing \
            --cov-fail-under=85 \
            --tb=short \
            --durations=10 \
            -m "unit and not slow"
            
      - name: Upload unit test coverage
        uses: codecov/codecov-action@v3
        with:
          file: services/auth-service/coverage-unit.xml
          flags: unit-tests
          name: unit-tests-coverage

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_authdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        working-directory: services/auth-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          
      - name: Run integration tests
        working-directory: services/auth-service
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_authdb
          REDIS_URL: redis://localhost:6379/1
          SECRET_KEY: test-secret-key-for-ci
          TESTING: true
          ENVIRONMENT: testing
        run: |
          pytest tests/integration/ \
            -v \
            --cov=src \
            --cov-append \
            --cov-report=xml:coverage-integration.xml \
            --cov-report=html:htmlcov-integration \
            --tb=short \
            --durations=10 \
            -m "integration and not slow"
            
      - name: Upload integration test coverage
        uses: codecov/codecov-action@v3
        with:
          file: services/auth-service/coverage-integration.xml
          flags: integration-tests
          name: integration-tests-coverage

  # Security Tests
  security-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_authdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        working-directory: services/auth-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          
      - name: Run security tests
        working-directory: services/auth-service
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_authdb
          REDIS_URL: redis://localhost:6379/1
          SECRET_KEY: test-secret-key-for-ci
          TESTING: true
          ENVIRONMENT: testing
        run: |
          pytest tests/security/ \
            -v \
            --tb=short \
            --durations=10 \
            -m "security and not slow"

  # Performance Tests (only on main branch)
  performance-tests:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_authdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        working-directory: services/auth-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          
      - name: Run performance tests
        working-directory: services/auth-service
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_authdb
          REDIS_URL: redis://localhost:6379/1
          SECRET_KEY: test-secret-key-for-ci
          TESTING: true
          ENVIRONMENT: testing
        run: |
          pytest tests/performance/ \
            -v \
            --tb=short \
            --durations=20 \
            -m "performance" \
            --benchmark-json=benchmark-results.json
            
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: services/auth-service/benchmark-results.json

  # Compliance Tests
  compliance-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_authdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        working-directory: services/auth-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          
      - name: Run compliance tests
        working-directory: services/auth-service
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_authdb
          REDIS_URL: redis://localhost:6379/1
          SECRET_KEY: test-secret-key-for-ci
          TESTING: true
          ENVIRONMENT: testing
        run: |
          pytest tests/compliance/ \
            -v \
            --tb=short \
            --durations=10 \
            -m "compliance"

  # Edge Case Tests
  edge-case-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_authdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        working-directory: services/auth-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          
      - name: Run edge case tests
        working-directory: services/auth-service
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_authdb
          REDIS_URL: redis://localhost:6379/1
          SECRET_KEY: test-secret-key-for-ci
          TESTING: true
          ENVIRONMENT: testing
        run: |
          pytest tests/edge_cases/ \
            -v \
            --tb=short \
            --durations=10 \
            -m "edge_case"

  # Generate Final Coverage Report
  coverage-report:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        working-directory: services/auth-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          
      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          name: coverage-reports
          path: services/auth-service/
          
      - name: Generate combined coverage report
        working-directory: services/auth-service
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_authdb
          REDIS_URL: redis://localhost:6379/1
          SECRET_KEY: test-secret-key-for-ci
          TESTING: true
          ENVIRONMENT: testing
        run: |
          # Run all tests with coverage
          pytest \
            --cov=src \
            --cov-report=xml:coverage-combined.xml \
            --cov-report=html:htmlcov-combined \
            --cov-report=term-missing \
            --cov-fail-under=90 \
            -m "not slow and not performance"
            
      - name: Upload combined coverage
        uses: codecov/codecov-action@v3
        with:
          file: services/auth-service/coverage-combined.xml
          flags: combined-tests
          name: combined-coverage
          
      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-html-report
          path: services/auth-service/htmlcov-combined/

  # Test Results Summary
  test-summary:
    runs-on: ubuntu-latest
    needs: [lint-and-security, unit-tests, integration-tests, security-tests, compliance-tests, edge-case-tests]
    if: always()
    steps:
      - name: Test Results Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Security | ${{ needs.lint-and-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY  
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Compliance Tests | ${{ needs.compliance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Edge Case Tests | ${{ needs.edge-case-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.lint-and-security.result }}" == "success" && 
                "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.security-tests.result }}" == "success" && 
                "${{ needs.compliance-tests.result }}" == "success" && 
                "${{ needs.edge-case-tests.result }}" == "success" ]]; then
            echo "✅ All test suites passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some test suites failed. Please check the individual job results." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi